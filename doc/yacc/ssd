.SH
Appendix D: An Example of Bundling
.PP
The following program is an example of the technique of
bundling; this example is discussed in Section 7.
.LP


/* warnings:
.IP 1.
This works on Unix; the handling of functions with a
variable number of arguments is different on different systems.
.IP 2.
A number of checks for array bounds have been left out
to avoid obscuring the basic ideas, but should
be there in a practical program.
.PP
  */
.LD


%token NAME

%right \&#39;=\&#39;
%left \&#39;+\&#39; \&#39;\-\&#39;
%left \&#39;*\&#39; \&#39;/\&#39;

%%

lines :
	= /* empty */
	{
		bclear( ) ;
	} |
	lines expr \&#39;\en\&#39; =
	{
		bprint( $2 ) ;
		printf( &quot;\en&quot; ) ;
		bclear( ) ;
	} |
	lines error \&#39;\en\&#39; =
	{
		bclear( ) ;
		yyerrok;
	} ;

expr :
	expr \&#39;+\&#39; expr =
	{
		$$ = bundle( &quot;add(&quot;, $1, &quot;,&quot;, $3, &quot;)&quot; );
	} |
	expr \&#39;\-\&#39; expr =
	{
		$$ = bundle( &quot;sub(&quot;, $1, &quot;,&quot;, $3, &quot;)&quot; );
	} |
	expr \&#39;*\&#39; expr =
	{
		$$ = bundle( &quot;mul(&quot;, $1, &quot;,&quot;, $3, &quot;)&quot; );
	} |
	expr \&#39;/\&#39; expr =
	{
		$$ = bundle( &quot;div(&quot;, $1, &quot;,&quot;, $3, &quot;)&quot; );
	} |
	\&#39;(\&#39; expr \&#39;)\&#39; =
	{
		$$ = $2;
	} |
	NAME \&#39;=\&#39; expr =
		$$ = bundle( &quot;assign(&quot;, $1, &quot;,&quot;, $3, &quot;)&quot; );
	} |
	NAME ;

%%

#define	nsize 200
char	names[nsize], *nptr { names };

#define	bsize 500
int	bspace[bsize], *bptr { bspace };

yylex( )
{
	int c;

	c = getchar( );
	while( c == \&#39; \&#39; )
		c = getchar( );
	if( c&gt;=\&#39;a\&#39; &amp;&amp; c&lt;=\&#39;z\&#39; ) {
		yylval = nptr;
		for( ; c&gt;=\&#39;a\&#39; &amp;&amp; c&lt;=\&#39;z\&#39;; c=getchar( ) )
			*nptr++ = c;
		ungetc( c );
		*nptr++ = \&#39;\e0\&#39;;
		return( NAME );
	}
	return( c );
}

bclear( )
{


	nptr = names;
	bptr = bspace;
}

bundle( a1,a2,a3,a4,a5 )
{
	int i, j, *p, *obp;

	p = &amp;a1;
	i = nargs( );
	obp = bptr;

	for( j=0; j&lt;i; ++j )
		*bptr++ = *p++;
	*bptr++ = 0;
	return( obp );
}

bprint( p )
int *p;
{

	if( p&gt;=bspace &amp;&amp; p&lt; &amp;bspace[bsize] ) /* bundle */
		while( *p != 0 )
			bprint( *p++ );
	else printf( &quot;%s&quot;,  p );
}
.DE
